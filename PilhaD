#include<iostream>
using namespace std;

struct Nodo
{
    int info;
    struct Nodo * prox;
};

class PilhaDinamica{
    private:
    Nodo * topo;

    public:
    PilhaDinamica(){
        topo = nullptr;
    };
    
    void empilhar(int valorEmpilhar){
        //criar ponteiro auxiliar
        Nodo * novo;
        novo = new Nodo(); //vai criar uma area:  |     info       |    prox       |
                           //                     | valorEmpilhar  |      /null    |
        novo->info = valorEmpilhar;
        //coloca o valorEmpilha na area info de 'novo'
        if(topo == nullptr){
            //não há nada na pilha, o novo elemento é
            //o primeiro a ser empilhado!
            novo->prox = nullptr; 
            //já que é o primeiro elemento, prox recebe null pois n
            //tem nada antes dele
        }
        else {
            novo->prox = topo; // a regiao prox desse novo elemento vai apontar para 
            //o endereço da primeira regiao, observe  |            info                   |            prox          |
            //                                        | valorEmpilhar (de dois para cima) | endereço de info ANTERIOR|
        }

        topo = novo; //atualiza o topo sempre ao final do processo
        //TOPO sempre terá a estrutura do primeiro elemento 
        cout<<"Valor empilhado: %d\n", valorEmpilhar;
    };

    void desempilhar(){
        //vamos criar um ponteiro auxiliar para desempilhar
        Nodo * aux;
        //se topo é nulo não tem nenhum elemento na pilha
        if (topo == nullptr){
            cout<<"Pilha está vazia";
            return;
        }
        else {
            aux = topo; //"pega" o topo atual
            topo = topo->prox; // topo passa a ser o elmento do nodo anterior
            int valorDesempilhar = aux->info; //para devolver esse valor
            cout<<"Valor desempilhado: %d\n", valorDesempilhar;                       
            delete aux; //deleta o elemento que estava no topo da pilha  
        }
        
    };
    void listar(){
        //criando um ponteiro auxiliar 
        Nodo * auxiliar;
        //aponta para o primeiro elemento
        auxiliar = topo;

        //enquanto auxiliar for diferente de nulo, ele irá imprimir elementos
        while (auxiliar != nullptr){
            cout<< auxiliar->info <<endl; //imprimir o elemento apontado em info
            auxiliar = auxiliar -> prox;  // passa a apontar para a prox regiao
        }

    };
};

int main (void){
    PilhaDinamica pilha;

    return 0;
}
