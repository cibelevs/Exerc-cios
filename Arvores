//criando uma arvore 28/05
#include<iostream>
using namespace std;

struct Nodo{
    int info;                                //         Nodo          //  
    struct Nodo * esq , * dir;               // * esq  || int || * dir //
};


class Tree{
    public:
    Nodo * raiz; //deixando a raiz como atributo publico
    
    Tree(){
        raiz = nullptr; //inicializando com nullptr
    }
    
    //a função retorna um ponteiro, pois o "link" esta no retorno
    //primeiro elemento da arvore
    Nodo * inserir (Nodo * raiz, int valor){
        if(raiz == nullptr){
            raiz = new Nodo(); //criando uma raiz
            if(raiz == nullptr){
                //verifica alocação
                cout<<"Erro ao alocar o Nodo"<<endl;
                return nullptr;
            }
            //raiz recebe o valor
            raiz->info = valor;
            //ponteiros da direita e esquerda recebem nullptr
            raiz->esq = nullptr;
            raiz->dir = nullptr;
            
            //retorna a raiz
            return raiz;
        }
        //não precisa do else já que tem o return
        // e quando a raiz não for nula? Perguntamos para que lado vamos
        
        //se o valor for maior que a raiz
        if(valor > (raiz->info)){
            //preciso chamar a função pela direita
            raiz->dir = inserir(raiz->dir, valor);
            //ela retorna para a raiz direita! 
        } else{
            //se for menor que a raiz
            if(valor < (raiz->info)){
                //preciso chamar função pela esquerda
                raiz->esq = inserir(raiz->esq, valor);
                //ela retorna para a raiz esquerda! 
            } 
            else{
                //se os valores forem iguais 
                cout<<"Numero repetido"<<endl;
            }
        }
        return raiz;
    }

 void inserirSemRecursao (Nodo * raiz, int num){
        
        if(raiz == nullptr){
            raiz = new Nodo();
            raiz = new Nodo(); //criando uma raiz
            if(raiz == nullptr){
                //verifica alocação
                cout<<"Erro ao alocar o Nodo"<<endl;
                return;
            }
            //raiz recebe o valor
            raiz->info = num;
            //ponteiros da direita e esquerda recebem nullptr
            raiz->esq = nullptr;
            raiz->dir = nullptr;
            return;
        }
        
        //criando dois ponteiros auxiliares
        Nodo * atual = nullptr;
        Nodo * pai = nullptr;
        atual = raiz;
        
        //enquanto "atual" for direfente de nullptr        
        while(atual != nullptr){
            pai = atual; // pai vai salvar o local para inseirir
            //perguntar sobre o valor para saber como mecher o atual
            if(num > (atual->info)){
                //se for maior
                atual = atual->dir;
            }
            else{
                //se for menor
                if(num < (atual->info)){
                    atual = atual->esq;
                }
                // se os valores forem iguais
                else{
                    cout<<"Valor Repetido"<<endl;
                    return;
                }
            }
        } //saindo daqui, já sei onde devo colocar o novo Valor
        
        atual = new Nodo();
        if (atual == nullptr){
            cout<<"Erro"<<endl;
            return;
        }
        
        //preenchendo...
        atual->info = num;
        atual->esq = nullptr;
        atual->dir = nullptr;
        
        if(num > (pai->info)){
            //se for maior que o local "pai", insere na direita
            pai->dir = atual;
        } 
        else {
            //se for menor que o local "pai", insere na esquerda
            pai->esq = atual;
        }
    }

void emOrdem(Nodo * raiz){
        if(raiz == nullptr){
            return; //condição de parada!
        }
        //imprimindo em ordem = esq , dir , raiz
        emOrdem(raiz->esq); //recursão!
        //chama a própria função, até achar menor elemento
        cout<<raiz->info<<endl;
        //imprime o menor 
        emOrdem(raiz->dir);
        //chama a própria função, até achar maior elemento
        //passa para o prox (ao lado direito)
    }
    
    //contando folhas da arvore 
    int contarFolhas(Nodo * raiz){
        if(raiz == nullptr){
            return 0;
        }
        if(raiz->esq == nullptr && ! raiz->dir){
            return 1;
        }
        return (contarFolhas(raiz->esq) + contarFolhas(raiz->dir));
        
        
    }
    
    bool isBinary(Nodo * raiz){
        if(raiz == nullptr){
            return true;
        }
        if((raiz->esq == nullptr && raiz->dir == nullptr) || (raiz->esq != nullptr && raiz->dir != nullptr)){
            return (isBinary(raiz->esq) * isBinary(raiz->dir));
        }
        else 
        return false;
    }
    
    Nodo * retirar (Nodo *raiz, int n){
        Nodo * aux =  nullptr;
        if(raiz == nullptr){
            return raiz;
        }
        //pergunta se é maior ou menor que a raiz primeiro
        if(n > raiz->info ){
            raiz->dir = retirar(raiz->dir, n); // vai buscando na arvore pela direita
        } else {
            if(n < raiz->info){
                raiz->esq = retirar(raiz->esq, n); // vai buscando na arvore pela esquerda
            }
            else {
                cout<<"Valor encontrado"<<endl;
                //pergunta se tem uma raiz solta (nesse caso é a esquerda) 
                //obs : se as duas forem nulo, vai eliminar da mesma forma! não precisa de outro if 

                if(raiz->esq == nullptr){
                    aux = raiz;
                    raiz = raiz->dir;
                    delete aux;
                    return raiz; // link com a arvore "pai" acima acontece aqui
                }
                else {
                    // a mesma pergunta só que pela esquerda
                    if(raiz->dir == nullptr){
                        aux = raiz;
                        raiz = raiz->esq;
                        delete aux;
                        return raiz;  
                    }
                    else {
                        raiz -> dir = substituir(raiz,raiz->dir); //Criando função auxiliar para substituir
                        //raiz ->dir vai ser o o sucessor na função recursiva
                        
                    }
                    
                }
                
            }
        }
        
        cout<<"Valor não encontrado na arvore"<<endl;
        return raiz;
    }
    
    
 Nodo* substituir (Nodo * raiz, Nodo * sucessor){
    Nodo * aux = nullptr;
    if (sucessor->esq == nullptr){
        raiz->info = sucessor->info;
        aux = sucessor;
        Nodo * temp = sucessor->dir;
        delete sucessor;
        return temp;
    } else {
        sucessor->esq = substituir(raiz, sucessor->esq);
        return sucessor;
    }

}
    

 int altura (Nodo * raiz){
    if(raiz == nullptr){
        return - 1;
    }
    int e = altura(raiz->esq);
    int d = altura(raiz->dir);
    if(e > d)
        return e + 1;
    else 
        return d + 1;
    
}


    
};

int main() {
Tree minhaArvore;
 // Teste com insercao recursiva
 minhaArvore.raiz = minhaArvore.inserir(minhaArvore.raiz, 10);
 minhaArvore.raiz = minhaArvore.inserir(minhaArvore.raiz, 5);
 minhaArvore.raiz = minhaArvore.inserir(minhaArvore.raiz, 15);
 minhaArvore.raiz = minhaArvore.inserir(minhaArvore.raiz, 3);

 std::cout << "\nImpressao em ordem (Recursiva):\n";
 minhaArvore.emOrdem(minhaArvore.raiz);

 // Teste de isBinary
 std::cout << "\nA estrutura atual é uma arvore binaria? ";
 if (minhaArvore.isBinary(minhaArvore.raiz))
 std::cout << "Sim\n";
 else
 std::cout << "Nao\n";
 return 0;
}


