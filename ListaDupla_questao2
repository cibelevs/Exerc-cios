#include <iostream>
using namespace std;

struct Nodo2 {
    int info;
    struct Nodo2* ant;
    struct Nodo2* prox;
};

class ListaDupla {
private:
    Nodo2 * inicio;
    Nodo2 * fim;

public:
//construtor
    ListaDupla() {
        inicio = nullptr;
        fim = nullptr;
    }
//inserir valor na lista
    void inserir(int valor) {
        Nodo2* novo = new Nodo2();
        if (novo == nullptr) {
            cout << "Erro ao alocar" << endl;
            return;
        }
        novo->info = valor;
        novo->ant = nullptr;
        novo->prox = nullptr;

        if (inicio == nullptr) {
            inicio = novo;
            fim = novo;
            return;
        }

        fim->prox = novo;
        novo->ant = fim;
        fim = novo;
    }
    
    
//retirar valor da lista
    void retirar(int valor) {
        if (inicio == nullptr) {
            cout << "Lista vazia" << endl;
            return;
        }

        Nodo2* auxiliar = inicio;

        while (auxiliar != nullptr) {
            //busca valor e realiza em cada caso
            if (auxiliar->info == valor) {
                if (auxiliar->ant == nullptr) {  // primeiro
                    inicio = auxiliar->prox;
                    if (inicio != nullptr) {
                        inicio->ant = nullptr;
                    }
                } else if (auxiliar->prox == nullptr) {  // último
                    fim = auxiliar->ant;
                    fim->prox = nullptr;
                } else {
                    //outros casos
                    auxiliar->ant->prox = auxiliar->prox;
                    auxiliar->prox->ant = auxiliar->ant;
                }

                delete auxiliar;
                return;
            }
            //caso não encontra avança
            auxiliar = auxiliar->prox;
        }

        cout << "Valor não encontrado na lista" << endl;
    }

    void EliminaProximos(int valor) {
        if (inicio == nullptr) {
            cout << "Lista Dupla Vazia" << endl;
            return;
        }

        //caso menos de 3 elementos na lista
        if (inicio->prox == nullptr || inicio->prox->prox == nullptr) {
            cout << "Não é possível fazer a alteração" << endl;
            return;
        }

        Nodo2* aux = inicio;
        while (aux != nullptr) {
            //busca valor
            if (aux->info == valor) {
                if (aux->ant != nullptr) {
                    Nodo2* anterior = aux->ant;
                    if (anterior->ant != nullptr) {
                        anterior->ant->prox = aux;
                        aux->ant = anterior->ant;
                    } else {
                        //caso inicio
                        inicio = aux;
                        aux->ant = nullptr;
                    }
                    delete anterior;
                }

                if (aux->prox != nullptr) {
                    Nodo2* sucessor = aux->prox;
                    if (sucessor->prox != nullptr) {
                        sucessor->prox->ant = aux;
                        aux->prox = sucessor->prox;
                    } else {
                        //caso fim
                        aux->prox = nullptr;
                        fim = aux;
                    }
                    delete sucessor;
                }

                return;
            }
            //avança caso não encontre
            aux = aux->prox;
        }

        cout << "Valor não encontrado na lista" << endl;
    }

    void exibir() {
        if (inicio == nullptr) {
            cout << "Lista Dupla Vazia" << endl;
            return;
        }
        //exibindo elementos...
        cout<<"Exibindo elementos da lista..."<<endl;
        Nodo2* auxiliar = inicio;
        while (auxiliar != nullptr) {
            cout << auxiliar->info << " ";
            auxiliar = auxiliar->prox;
        }
        cout << endl;
    }

    void menu() {
        //função para imprimir o menu
        cout<<"\n///////MENU////////"<<endl;
        cout<<"Insira 1 para inserir"<<endl;
        cout<<"Insira 2 para retirar um Nodo"<<endl;
        cout<<"Insira 3 para retirar Nodos proximos"<<endl;
        cout<<"Insira 4 para exibir lista"<<endl;
        cout<<"Insira 5 para sair"<<endl;
        cout<<"Digite uma opcao: ";
    }
};

int main() {
    ListaDupla lista;
    int opcao = 0;

    do {
        lista.menu();
        cin >> opcao;

        switch (opcao) {
            case 1: {
                int valor;
                cout << "Insira valor para inserir: ";
                cin >> valor;
                lista.inserir(valor);
                break;
            }
            case 2: {
                int valor;
                cout << "Insira valor para retirar: ";
                cin >> valor;
                lista.retirar(valor);
                break;
            }
            case 3: {
                int valor;
                cout << "Insira valor para eliminar Nodos próximos: ";
                cin >> valor;
                lista.EliminaProximos(valor);
                break;
            }
            case 4:
                lista.exibir();
                break;
            case 5:
                cout << "Operação Finalizada" << endl;
                break;
            default:
                cout << "Operação inválida" << endl;
                break;
        }
    } while (opcao != 5);

    return 0;
}

